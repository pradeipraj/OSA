package com.onlineshopping.App.service;

import com.onlineshopping.App.dto.AddressDTO;
import com.onlineshopping.App.entity.AddressEntity;
import com.onlineshopping.App.exception.AddressNotFoundException;
import com.onlineshopping.App.exception.InvalidAddressException;
import com.onlineshopping.App.repository.AddressRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

import static org.springframework.data.jpa.domain.AbstractPersistable_.id;

@Service
public class AddressService {
    @Autowired
    private AddressRepository addressRepository;

    public AddressEntity addAddress(AddressDTO addressDTO) {
        // Example validation logic, modify as per your requirements
        if (!isValidAddress(addressDTO)) {
// Throw an exception or handle invalid address scenario
            throw new InvalidAddressException("Invalid address details");
        }
        AddressEntity addressEntity = new AddressEntity();

        addressEntity.setUserId(addressDTO.getUser_id());
        addressEntity.setStreet_address(addressDTO.getStreet_address());
        addressEntity.setCity(addressDTO.getCity());
        addressEntity.setState(addressDTO.getState());
        addressEntity.setPostal_code((addressDTO.getPostal_code()));
        addressEntity.setCountry(addressDTO.getCountry());
        addressEntity.setDefaultAddress(addressDTO.getDefaultAddress());

        addressEntity.setDefaultAddress(addressDTO.getDefaultAddress() != null ? addressDTO.getDefaultAddress() : true);

        return addressRepository.save(addressEntity);


    }

    private boolean isValidAddress(AddressDTO addressDTO) {
        return addressDTO.getStreet_address() != null && !addressDTO.getStreet_address().isEmpty() &&
                addressDTO.getCity() != null && !addressDTO.getCity().isEmpty() &&
                addressDTO.getState() != null && !addressDTO.getState().isEmpty() &&
                addressDTO.getPostal_code() != null && !addressDTO.getPostal_code().isEmpty() &&
                addressDTO.getCountry() != null && !addressDTO.getCountry().isEmpty();
    }

    // Mapping AddressDTO to AddressEntity
    AddressEntity mapDtoToEntity(AddressDTO addressDTO) {
        AddressEntity addressEntity = new AddressEntity();
        addressEntity.setUserId(addressDTO.getUser_id());
        addressEntity.setStreet_address(addressDTO.getStreet_address());
        addressEntity.setCity(addressDTO.getCity());
        addressEntity.setState(addressDTO.getState());
        addressEntity.setPostal_code((addressDTO.getPostal_code()));
        addressEntity.setCountry(addressDTO.getCountry());
        addressEntity.setDefaultAddress(addressDTO.getDefaultAddress());
        // Address ID might be generated by the database upon save
        // addressEntity.setAddressId(addressDTO.getAddressId());

        return addressEntity;
    }

    public List<AddressEntity> getAllAddress() {

        return addressRepository.findAll();
    }

    public AddressEntity updateAddressById(Long Id, AddressDTO addressDTO) {
        Optional<AddressEntity> optionalExistingAddress = addressRepository.findById(Id);

        if (optionalExistingAddress.isPresent()) {
            AddressEntity existingAddress = optionalExistingAddress.get();

            existingAddress.setUserId(addressDTO.getUser_id());
            existingAddress.setStreet_address(addressDTO.getStreet_address());
            existingAddress.setCity(addressDTO.getCity());
            existingAddress.setState(addressDTO.getState());
            existingAddress.setPostal_code(addressDTO.getPostal_code());
            existingAddress.setCountry(addressDTO.getCountry());
            existingAddress.setDefaultAddress(addressDTO.getDefaultAddress());

            return addressRepository.save(existingAddress);
        } else {
            throw new AddressNotFoundException("Address not found with id: " + Id);
        }
    }

    public void deleteAddressById(Long id){
        Optional<AddressEntity> optionalAddress = addressRepository.findById(id);
        if (optionalAddress.isPresent()){
            AddressEntity address = optionalAddress.get();
            addressRepository.delete(address);
        } else {
            throw new AddressNotFoundException("Address not found for id: " +id);
        }

    }

    public AddressEntity getAddressById(Long Id){
        return addressRepository.findById(Id).orElseThrow(() -> new AddressNotFoundException(("Address not found with id: " + Id)));
    }

    public List<AddressEntity> getAddressesByUserId(String userId) {

        return addressRepository.findByUserId(userId);
    }
    public void setAsDefaultAddress(Long addressId) {
        List<AddressEntity> addresses = addressRepository.findAll();

        for (AddressEntity address : addresses) {
            if (address.getId().equals(addressId)) {
                address.setDefaultAddress(true);
            } else {
                address.setDefaultAddress(false);
            }
        }

        addressRepository.saveAll(addresses);
    }
}

